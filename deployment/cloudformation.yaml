AWSTemplateFormatVersion: '2010-09-09'
Description: 'Portfolio Website Infrastructure with S3, CloudFront, and CI/CD Pipeline'

Parameters:
  DomainName:
    Type: String
    Description: Domain name for the portfolio website (e.g., portfolio.example.com)
    Default: portfolio.example.com

  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate in us-east-1 region
    Default: ''

Resources:
  # S3 Bucket for hosting static website
  PortfolioS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${DomainName}-portfolio-bucket'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Project
          Value: Portfolio
        - Key: Environment
          Value: Production

  # S3 Bucket Policy for public read access
  PortfolioS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PortfolioS3Bucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: !Sub '${PortfolioS3Bucket}/*'

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${DomainName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  PortfolioCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt PortfolioS3Bucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        PriceClass: PriceClass_100
        HttpVersion: http2
      Tags:
        - Key: Project
          Value: Portfolio
        - Key: Environment
          Value: Production

  # CodeCommit Repository (optional - can use GitHub instead)
  PortfolioCodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: portfolio-website
      RepositoryDescription: Portfolio website source code
      Tags:
        - Key: Project
          Value: Portfolio

  # CodeBuild Service Role
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${PortfolioS3Bucket}/*'
                  - !Ref PortfolioS3Bucket
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${PortfolioCloudFrontDistribution}'

  # CodeBuild Project
  PortfolioCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: portfolio-build
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref PortfolioS3Bucket
          - Name: CLOUDFRONT_DISTRIBUTION_ID
            Value: !Ref PortfolioCloudFrontDistribution
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to npm...
                - npm ci
            build:
              commands:
                - echo Build started on `date`
                - npm run build
                - npm test -- --coverage --watchAll=false
            post_build:
              commands:
                - echo Build completed on `date`
                - aws s3 sync build/ s3://$S3_BUCKET --delete
                - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
          artifacts:
            files:
              - '**/*'
            base-directory: build
      Tags:
        - Key: Project
          Value: Portfolio

  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub '${CodePipelineArtifactStore}/*'
                  - !Ref CodePipelineArtifactStore
              - Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:ListBranches
                  - codecommit:ListRepositories
                Resource: !GetAtt PortfolioCodeCommitRepo.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt PortfolioCodeBuildProject.Arn

  # S3 Bucket for CodePipeline Artifacts
  CodePipelineArtifactStore:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${DomainName}-codepipeline-artifacts'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Project
          Value: Portfolio

  # CodePipeline
  PortfolioCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: portfolio-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName: !GetAtt PortfolioCodeCommitRepo.Name
                BranchName: main
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref PortfolioCodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
      Tags:
        - Key: Project
          Value: Portfolio

Outputs:
  WebsiteURL:
    Description: URL of the portfolio website
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  S3BucketName:
    Description: Name of the S3 bucket
    Value: !Ref PortfolioS3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref PortfolioCloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CodeCommitRepoCloneUrl:
    Description: CodeCommit repository clone URL
    Value: !GetAtt PortfolioCodeCommitRepo.CloneUrlHttp
    Export:
      Name: !Sub '${AWS::StackName}-CodeCommitRepoCloneUrl'
